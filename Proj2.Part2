#include <stdio.h> // for stderr
#include <stdlib.h> // for exit()
#include "mips.h" // for execute_syscall()
#include "types.h"

void execute_instruction(Instruction instruction,Processor* processor,Byte *memory) {
    
    /* YOUR CODE HERE: COMPLETE THE SWITCH STATEMENTS */
    Alignment align = LENGTH_BYTE;
    switch(instruction.opcode) {
        case 0x0: // opcode == 0x0(SPECIAL)
            
            switch(instruction.rtype.funct) {
                case 0x0:
                    // funct == 0x00 (SLL)  
                    processor->R[instruction.rtype.rd] = processor->R[instruction.rtype.rt] << instruction.rtype.shamt;
                    processor->PC += 4;
                    break;
                case 0x2: // funct == 0x02 (SRL) 
                    processor->R[instruction.rtype.rd] = processor->R[instruction.rtype.rt] >> instruction.rtype.shamt;
                    processor->PC += 4;
                    break;
                case 0x3: // funct == 0x03 (SRA) 
                    processor->R[instruction.rtype.rd] = ((sWord)processor->R[instruction.rtype.rt]) >> instruction.rtype.shamt;
                    processor->PC += 4;
                    break;
                case 0x8: // funct == 0x08 (JR) 
                    processor->PC = processor->PC+4;
                    processor->PC+4 = processor->R[instruction.rtype.rs];
                    break;
                case 0x9: // funct == 0x09 (JALR) 
                    
                    break;
                case 0xc: // funct == 0xc (SYSCALL)
                    execute_syscall(processor);
                    processor->PC += 4;
                    break;
                case 0x10: // funct == 0x10 (MFHI)
                    processor->R[instruction.rtype.rd]=processor->RHI;
                    break;
                case 0x12: // funct == 0x12 (MFLO)
                    processor->R[instruction.rtype.rd]=processor->RLO;
                    break;
                case 0x18: // funct == 0x18 (MULT)
                {
                    sDouble tmp = ((sDouble)processor->(sDouble)R[instruction.rtype.rs] * (sDouble)processor->R[instruction.rtype.rt];
                    processor->RLO=(tmp << 32) >> 32;
                    processor->RHI=tmp >> 32;
                    processor->PC += 4;
                    break;
                }
                case 0x19: // funct == 0x19 (MULTU)
                {
                    sDouble tmp = ((Double)processor->(Double)R[instruction.rtype.rs] * (Double))processor->R[instruction.rtype.rt];
                    processor->RLO=(tmp << 32) >> 32;
                    processor->RHI=tmp >> 32;
                    processor->PC += 4;
                    break;
                }
                    processor->PC += 4;
                    break;
                case 0x21: // funct == 0x21 (ADDU) 
                    processor->R[instruction.rtype.rd]=processor->R[instruction.rtype.rs] + processor->R[instruction.rtype.rt];
                    processor->PC += 4;
                    break;
                case 0x23: // funct == 0x23 (SUBU)
                    processor->R[instruction.rtype.rd]=processor->R[instruction.rtype.rs] - processor->R[instruction.rtype.rt];
                    processor->PC += 4;
                    break;

                case 0x24: // funct == 0x24 (AND)
                    processor->R[instruction.rtype.rd] = processor->R[instruction.rtype.rs] & processor->R[instruction.rtype.rt];
                    processor->PC += 4;
                    break;
                case 0x25: // funct == 0x25 (OR) given
                    processor->R[instruction.rtype.rd] = processor->R[instruction.rtype.rs] | processor->R[instruction.rtype.rt];
                    break;
                case 0x26: // funct == 0x26 (XOR)
                    processor->R[instruction.rtype.rd] = processor->R[instruction.rtype.rs] ^ processor->R[instruction.rtype.rt];
                    break;
                case 0x27: // funct == 0x27 (NOR) fix
                    processor->R[instruction.rtype.rd] = ~(processor->R[instruction.rtype.rs] | processor->R[instruction.rtype.rt]);
                    break;
                case 0x2a: // funct == 0x2a (SLT)
                    if (((sWord)processor->R[instruction.rtype.rs]) < ((sWord)processor->R[instruction.rtype.rt])) {
                        processor->R[instruction.rtype.rd]=1;
                    }
                    else {
                         processor->R[instruction.rtype.rd]=0
                    }
                    processor->PC += 4;
                    break;
                case 0x2b: // funct == 0x2b (SLTU) 
                    if (processor->R[instruction.rtype.rs]<processor->R[instruction.rtype.rt]) {
                        processor->R[instruction.rtype.rd]=1;
                    }
                    else {
                        d=0;
                    }
                    processor->PC += 4;
                    break;

                
                default: // undefined funct
                    fprintf(stderr,"%s: pc=%08x,illegal function=%08x\n",__FUNCTION__,processor->PC,instruction.bits);
                    exit(-1);
                    break;
            }
            break;
        case 0x2: // opcode == 0x2 (J) given
            processor->PC = ((processor->PC+4) & 0xf0000000) | (instruction.jtype.addr << 2)       ;
            break;
        case 0xd: // opcode == 0xd (ORI)
            processor->R[instruction.itype.rt] = ([instruction.itype.rs] | instruction.itype.imm);
            processor->PC += 4;
            break;
        case 0x3: // opcode == 0x3 (JAL) ? 
            processor->R[31] = processor->PC+4;
            processor->PC=((processor->PC+4)&(0xf000000) | (instruction.jtype.addr<<2));
            //processor->PC+4 = ((processor->PC & (0xf0000000))| (instruction.jtype.addr<<2));
            break;
        case 0x4: // opcode == 0x4 (BEQ)
            if (processor->R[instruction.itype.rs] ==processor->R[instruction.itype.rt]) {
                processor->PC = (processor->PC + 4+(processor->PC + ((sHalf)instruction.itype.imm*4)));
            }
                else {
                    processor->PC=+4;
                }
            break;
        case 0x5: // opcode == 0x5 (BNE)
            if (processor->R[instruction.itype.rs] != processor->R[instruction.itype.rt]) {
                processor->PC = (processor->PC + 4 + (processor->PC + ((sHalf)instruction.itype.imm*4)));
            }
            else {
                processor->PC=processor->PC+4;
            }
            break;
        case 0x9: // opcode == 0x9 (ADDIU)
        //    $t = $s + imm; advance_pc (4);
            processor->R[instruction.itype.rt] = processor->R[instruction.itype.rs] + ((sHalf)instruction.itype.imm);
            processor->PC=processor->PC+4;
            break;
        case 0xa: // opcode == 0xa (SLTI)
           // if $s < imm $t = 1; advance_pc (4); else $t = 0; advance_pc (4);
            if ((sWord)processor->R[instruction.itype.rs] < ((sHalf)instruction.itype.imm)) {
                processor->R[instruction.itype.rt] = 1;
            }
            else {
                 processor->R[instruction.itype.rt] = 0;
            }
            processor->PC=processor->PC+4;
            break;
        case 0xb: // opcode == 0xb (SLTIU)  
            if (processor->R[instruction.itype.rs] < ((sHalf)instruction.itype.imm)) {
                processor->R[instruction.itype.rt] = 1;
            }
            else {
                processor->R[instruction.itype.rt] = 0;
            }
            processor->PC=processor->PC+4;
            break;
        case 0xc: // opcode == 0xc (ANDI)
            processor->R[instruction.itype.rt] = (processor->R[instruction.itype.rs] & instruction.itype.imm);
            processor->PC=processor->PC+4;
            break;
        case 0xe: // opcode == 0xe (XORI)
            processor->R[instruction.itype.rt] = (processor->R[instruction.itype.rs] ^ instruction.itype.imm);
            processor->PC=processor->PC+4;
            break;
        case 0xf: // opcode == 0xf (LUI)
            processor->R[instruction.itype.rt] = instruction.itype.imm<<16;
            processor->PC=processor->PC+4;
            break;
        case 0x20: // opcode == 0x20 (LB)
        {
            align=LENGTH_BYTE;
            processor->R[instruction.itype.rt] = ((sHalf)load(*memory, ((sHalf)processor->R[instruction.itype.rs + (sHalf)instruction.itype.imm]),align));
            break;
        }
        case 0x21: // opcode == 0x21 (LH)
        {
            align=LENGTH_HALF_WORD;
            processor->R[instruction.itype.rt] = ((sHalf)load(*memory, ((sHalf)processor->R[instruction.itype.rs + (sHalf)instruction.itype.imm]),align));
            break;
        }
        case 0x23: // opcode == 0x23 (LW)
        {
            align=LEGNTH_WORD;
            processor->R[instruction.itype.rt] = ((sWord)load(*memory, ((sHalf)processor->R[instruction.itype.rs + (sHalf)instruction.itype.imm]),align));
            break;
        }
        case 0x24: // opcode == 0x24 (LBU)
        {
            align=LENGTH_BYTE;
            processor->R[instruction.itype.rt] = load(*memory, processor->R[instruction.itype.rs + (sHalf)instruction.itype.imm],align);
            break;
        }
        case 0x25: // opcode == 0x25 (LHU)
        {
            align=LENGTH_HALF_WORD
            processor->R[instruction.itype.rt] = load(*memory, processor->R[instruction.itype.rs + (sHalf)instruction.itype.imm],align);
            break;
        }
        case 0x28: // opcode == 0x28 (SB)
        {
            align=LENGTH_BYTE;
            store(*memory, processor->R[instruction.itype.rs+((sHalf)instruction.itype.imm)],align, processor->R[instruction.itype.rt]);
            processor->PC=processor->PC+4;
            break;
        }
        case 0x29: // opcode == 0x29 (SH)
        {
            align=LENGTH_HALF_WORD;
            store(*memory, processor->R[instruction.itype.rs+((sHalf)instruction.itype.imm)],align, processor->R[instruction.itype.rt]);
            processor->PC=processor->PC+4;
            break;
        }
        case 0x2b: // opcode == 0x2b (SW)
        {
            align=LEGNTH_WORD;
            store(*memory, processor->R[instruction.itype.rs+((sHalf)instruction.itype.imm)],align, processor->R[instruction.itype.rt]);
            processor->PC=processor->PC+4;
            break;
        }
         
            

        default: // undefined opcode
            fprintf(stderr,"%s: pc=%08x,illegal instruction: %08x\n",__FUNCTION__,processor->PC,instruction.bits);
            exit(-1);
            break;
    }
}


int check(Address address,Alignment alignment) {
    if (address<=1 || address>MEMORY_SPACE || address % alignment !=0) {
        return 0;
    }
    /* YOUR CODE HERE */
    return 1;
}

void store(Byte *memory,Address address,Alignment alignment,Word value) {
    if(!check(address,alignment)) {
        fprintf(stderr,"%s: bad write=%08x\n",__FUNCTION__,address);
        exit(-1);
        
    
    }
    //memory points to first thing in memory; add the address to it
    Word store = address;
    if (alignment==LENGTH_BYTE){
        *(memory+address) == store & 0x000000FF;
        store=store>>8;
    }
    else if (alignment==LENGTH_HALF_WORD){
        for (i=0; i<alignment; i++){
            *(memory+i+address) = store & 0x0000FFFF;
            store=store>>16;
        }
    }
    
    for (i=0; i<alignment; i++){
        *(memory+i+address) = store; 
    }
    
    /* YOUR CODE HERE */
    
}


Word load(Byte *memory,Address address,Alignment alignment) {
    if(!check(address,alignment)) {
        fprintf(stderr,"%s: bad read=%08x\n",__FUNCTION__,address);
        exit(-1);
    }
    
    
    /* YOUR CODE HERE */
    
    // incomplete stub to let "simple" execute
    // (only handles size == SIZE_WORD correctly)
    // feel free to delete and implement your own way
    if (alignment==LENGTH_BYTE) {
        return *(Byte)(*memory+address);
    }
    else if (alignment==LENGTH_HALF_WORD) {
        return *(Half)(*memory+address);
    }
    else {
        return *(Word)(*memory+address);
    }

}
